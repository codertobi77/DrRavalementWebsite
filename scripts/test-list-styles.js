import { readFileSync, existsSync } from 'fs';

console.log("üî¢ Test des styles de listes...\n");

// V√©rifier les styles ajout√©s
console.log("1Ô∏è‚É£ V√©rification des styles de listes...");

const editorContent = readFileSync('src/components/admin/RichTextEditor.tsx', 'utf8');

// V√©rifier les classes Tailwind pour les listes
const tailwindClasses = [
  'list-decimal list-inside',
  'list-disc list-inside',
  'mb-4 pl-6'
];

console.log("üìù Classes Tailwind :");
for (const className of tailwindClasses) {
  if (editorContent.includes(className)) {
    console.log(`‚úÖ ${className}`);
  } else {
    console.log(`‚ùå ${className} manquant`);
  }
}

// V√©rifier les styles CSS
const cssStyles = [
  'list-style-type: disc',
  'list-style-type: decimal',
  'list-style-position: inside',
  'display: list-item'
];

console.log("\nüìù Styles CSS :");
for (const style of cssStyles) {
  if (editorContent.includes(style)) {
    console.log(`‚úÖ ${style}`);
  } else {
    console.log(`‚ùå ${style} manquant`);
  }
}

// V√©rifier la logique conditionnelle
console.log("\n2Ô∏è‚É£ V√©rification de la logique conditionnelle...");
const conditionalLogic = [
  'if (ordered)',
  'list.className = \'mb-4 pl-6 list-decimal list-inside\'',
  'list.className = \'mb-4 pl-6 list-disc list-inside\'',
  'ordered ? \'ol\' : \'ul\''
];

for (const logic of conditionalLogic) {
  if (editorContent.includes(logic)) {
    console.log(`‚úÖ ${logic} pr√©sent`);
  } else {
    console.log(`‚ùå ${logic} manquant`);
  }
}

// V√©rifier les s√©lecteurs CSS
console.log("\n3Ô∏è‚É£ V√©rification des s√©lecteurs CSS...");
const cssSelectors = [
  '[contenteditable] ul',
  '[contenteditable] ol',
  '[contenteditable] li'
];

for (const selector of cssSelectors) {
  if (editorContent.includes(selector)) {
    console.log(`‚úÖ ${selector} d√©fini`);
  } else {
    console.log(`‚ùå ${selector} manquant`);
  }
}

console.log("\nüéâ Test des styles de listes termin√© !");
console.log("\nüìã R√©sum√© des styles impl√©ment√©s :");
console.log("   ‚úÖ Puces (disc) pour les listes √† puces");
console.log("   ‚úÖ Num√©ros (decimal) pour les listes num√©rot√©es");
console.log("   ‚úÖ Position inside pour les marqueurs");
console.log("   ‚úÖ Display list-item pour les √©l√©ments");
console.log("   ‚úÖ Classes Tailwind appliqu√©es dynamiquement");

console.log("\nüî¢ Types de listes support√©es :");
console.log("   ‚Ä¢ Liste √† puces (ul) : Puces rondes (‚Ä¢)");
console.log("   ‚Ä¢ Liste num√©rot√©e (ol) : Num√©ros (1, 2, 3...)");
console.log("   ‚Ä¢ Position inside : Marqueurs √† l'int√©rieur des √©l√©ments");

console.log("\nüé® Styles appliqu√©s :");
console.log("   ‚Ä¢ Puces : list-style-type: disc");
console.log("   ‚Ä¢ Num√©ros : list-style-type: decimal");
console.log("   ‚Ä¢ Position : list-style-position: inside");
console.log("   ‚Ä¢ Affichage : display: list-item");
console.log("   ‚Ä¢ Indentation : padding-left: 1.5rem");

console.log("\nüöÄ Les puces et num√©ros devraient maintenant s'afficher !");
console.log("üí° Fonctionnement :");
console.log("   ‚Ä¢ Liste √† puces : Affiche des puces rondes (‚Ä¢)");
console.log("   ‚Ä¢ Liste num√©rot√©e : Affiche des num√©ros (1, 2, 3...)");
console.log("   ‚Ä¢ Les marqueurs sont positionn√©s √† l'int√©rieur des √©l√©ments");
console.log("   ‚Ä¢ L'indentation est g√©r√©e automatiquement");

console.log("\nüîç Pour tester :");
console.log("   1. Red√©marrez le serveur : npm run dev");
console.log("   2. Allez sur /admin/articles");
console.log("   3. Cr√©ez un nouvel article");
console.log("   4. Testez les boutons de listes");
console.log("   5. V√©rifiez que les puces/num√©ros s'affichent");
console.log("   6. Sauvegardez et v√©rifiez sur /blog");

console.log("\nüí° Conseils d'utilisation :");
console.log("   ‚Ä¢ Les puces et num√©ros apparaissent automatiquement");
console.log("   ‚Ä¢ Utilisez 'Liste √† puces' pour des √©l√©ments non ordonn√©s");
console.log("   ‚Ä¢ Utilisez 'Liste num√©rot√©e' pour des √©tapes ou une s√©quence");
console.log("   ‚Ä¢ Les marqueurs sont visibles dans l'√©diteur et le modal");
