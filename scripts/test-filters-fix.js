import { readFileSync, existsSync } from 'fs';

console.log("üîß Test de la correction des filtres...\n");

// V√©rifier les modifications de la page blog
console.log("1Ô∏è‚É£ V√©rification des modifications de la page blog...");

const blogPagePath = 'src/pages/blog/page.tsx';
if (existsSync(blogPagePath)) {
  const blogContent = readFileSync(blogPagePath, 'utf8');
  
  // V√©rifier que "Actualit√©s" n'est plus ajout√© manuellement
  console.log("üìä V√©rification de la logique des cat√©gories :");
  
  if (blogContent.includes("['Tous', 'Actualit√©s', ...(categoriesData || [])]")) {
    console.log("‚ùå 'Actualit√©s' encore ajout√© manuellement");
  } else if (blogContent.includes("['Tous', ...(categoriesData || [])]")) {
    console.log("‚úÖ 'Actualit√©s' n'est plus ajout√© manuellement");
  } else {
    console.log("‚ö†Ô∏è  Logique des cat√©gories modifi√©e");
  }
  
  // V√©rifier la logique de filtrage
  console.log("\nüìä V√©rification de la logique de filtrage :");
  const filterChecks = [
    'selectedCategory === \'Tous\' ||',
    'selectedCategory === \'Actualit√©s\' && article.category === \'Actualit√©s\'',
    'selectedCategory !== \'Actualit√©s\' && article.category === selectedCategory'
  ];
  
  for (const check of filterChecks) {
    if (blogContent.includes(check)) {
      console.log(`‚úÖ ${check} pr√©sent`);
    } else {
      console.log(`‚ùå ${check} manquant`);
    }
  }
  
} else {
  console.log("‚ùå Page blog non trouv√©e");
}

// V√©rifier les modifications de Convex
console.log("\n2Ô∏è‚É£ V√©rification des modifications de Convex...");

const convexPath = 'convex/articles.ts';
if (existsSync(convexPath)) {
  const convexContent = readFileSync(convexPath, 'utf8');
  
  // V√©rifier que "Conseils" a √©t√© supprim√© des cat√©gories par d√©faut
  console.log("üìä V√©rification des cat√©gories par d√©faut :");
  
  if (convexContent.includes("'Actualit√©s', 'Conseils', 'Techniques', 'R√©novation'")) {
    console.log("‚ùå 'Conseils' encore pr√©sent dans les cat√©gories par d√©faut");
  } else if (convexContent.includes("'Actualit√©s', 'Techniques', 'R√©novation'")) {
    console.log("‚úÖ 'Conseils' supprim√© des cat√©gories par d√©faut");
  } else {
    console.log("‚ö†Ô∏è  Cat√©gories par d√©faut modifi√©es");
  }
  
  // V√©rifier que "Actualit√©s" est toujours pr√©sent
  if (convexContent.includes("'Actualit√©s'")) {
    console.log("‚úÖ 'Actualit√©s' pr√©sent dans les cat√©gories par d√©faut");
  } else {
    console.log("‚ùå 'Actualit√©s' manquant des cat√©gories par d√©faut");
  }
  
} else {
  console.log("‚ùå convex/articles.ts non trouv√©");
}

console.log("\nüéâ Test de la correction des filtres termin√© !");
console.log("\nüìã R√©sum√© des corrections :");
console.log("   ‚úÖ 'Actualit√©s' n'est plus ajout√© manuellement dans la page blog");
console.log("   ‚úÖ 'Actualit√©s' est r√©cup√©r√© depuis la base de donn√©es via Convex");
console.log("   ‚úÖ 'Conseils' supprim√© des cat√©gories par d√©faut");
console.log("   ‚úÖ Plus de doublons dans la liste des filtres");

console.log("\nüöÄ Fonctionnement attendu :");
console.log("   ‚Ä¢ Filtres disponibles : Tous, Actualit√©s, Techniques, R√©novation + cat√©gories existantes");
console.log("   ‚Ä¢ Pas de doublons dans la liste");
console.log("   ‚Ä¢ Filtre 'Actualit√©s' affiche uniquement les articles de cette cat√©gorie");
console.log("   ‚Ä¢ Filtre 'Tous' affiche tous les articles");

console.log("\nüí° Pour tester :");
console.log("   1. D√©marrez le serveur : npm run dev");
console.log("   2. Allez sur /blog");
console.log("   3. V√©rifiez la liste des filtres :");
console.log("      - Pas de doublons");
console.log("      - 'Conseils' absent");
console.log("      - 'Actualit√©s' pr√©sent une seule fois");
console.log("   4. Testez le filtrage par cat√©gorie");
