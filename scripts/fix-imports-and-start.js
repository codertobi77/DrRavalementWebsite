import { execSync } from 'child_process';
import { existsSync, readFileSync } from 'fs';
import { join } from 'path';

console.log("üîß Correction des imports et d√©marrage du serveur...\n");

async function fixImportsAndStart() {
  try {
    // 1. V√©rifier la configuration Convex
    console.log("1Ô∏è‚É£ V√©rification de la configuration Convex...");
    const envPath = join(process.cwd(), '.env');
    if (!existsSync(envPath)) {
      console.log("‚ùå Fichier .env non trouv√©");
      process.exit(1);
    }

    const envContent = readFileSync(envPath, 'utf8');
    const convexUrlMatch = envContent.match(/VITE_CONVEX_URL=(.+)/);
    const convexUrl = convexUrlMatch ? convexUrlMatch[1].trim() : null;

    if (!convexUrl || convexUrl.includes('your-convex-deployment')) {
      console.log("‚ùå URL Convex non configur√©e");
      console.log("üí° Ex√©cutez : node scripts/setup-convex-url.js");
      process.exit(1);
    }

    console.log("‚úÖ Configuration Convex OK");

    // 2. D√©ployer Convex
    console.log("\n2Ô∏è‚É£ D√©ploiement Convex...");
    try {
      execSync('npx convex dev --once', { stdio: 'pipe' });
      console.log("‚úÖ Convex d√©ploy√©");
    } catch (error) {
      console.log("‚ö†Ô∏è  Erreur lors du d√©ploiement Convex, mais continuons...");
    }

    // 3. V√©rifier les fichiers g√©n√©r√©s
    console.log("\n3Ô∏è‚É£ V√©rification des fichiers g√©n√©r√©s...");
    const generatedFiles = [
      'convex/_generated/api.d.ts',
      'convex/_generated/api.js',
      'convex/_generated/dataModel.d.ts'
    ];

    let allFilesExist = true;
    for (const file of generatedFiles) {
      if (!existsSync(file)) {
        console.log(`‚ùå ${file} manquant`);
        allFilesExist = false;
      }
    }

    if (!allFilesExist) {
      console.log("‚ùå Fichiers g√©n√©r√©s manquants");
      process.exit(1);
    }

    console.log("‚úÖ Fichiers g√©n√©r√©s pr√©sents");

    // 4. V√©rifier la configuration Vite
    console.log("\n4Ô∏è‚É£ V√©rification de la configuration Vite...");
    const viteConfigPath = 'vite.config.ts';
    if (!existsSync(viteConfigPath)) {
      console.log("‚ùå Fichier vite.config.ts non trouv√©");
      process.exit(1);
    }

    const viteConfig = readFileSync(viteConfigPath, 'utf8');
    if (!viteConfig.includes("'convex': resolve(__dirname, './convex')")) {
      console.log("‚ùå Alias Convex manquant dans Vite");
      console.log("üí° Ajoutez : 'convex': resolve(__dirname, './convex')");
      process.exit(1);
    }

    console.log("‚úÖ Configuration Vite OK");

    // 5. Tester la connexion
    console.log("\n5Ô∏è‚É£ Test de la connexion...");
    try {
      const { ConvexHttpClient } = await import("convex/browser");
      const client = new ConvexHttpClient(convexUrl);
      const articles = await client.query("articles:getArticles", {});
      console.log(`‚úÖ Connexion r√©ussie ! ${articles.length} articles trouv√©s`);
    } catch (error) {
      console.log(`‚ùå Erreur de connexion : ${error.message}`);
      process.exit(1);
    }

    console.log("\nüéâ Tous les tests sont pass√©s !");
    console.log("\nüìã Configuration valid√©e :");
    console.log("   ‚úÖ Fichiers g√©n√©r√©s par Convex");
    console.log("   ‚úÖ Configuration .env");
    console.log("   ‚úÖ Alias Vite configur√©");
    console.log("   ‚úÖ Connexion Convex");
    console.log("   ‚úÖ Fonctions articles disponibles");

    console.log("\nüöÄ D√©marrage du serveur de d√©veloppement...");
    console.log("üí° Le serveur va d√©marrer sur http://localhost:3000");
    console.log("üì± Acc√©dez √† :");
    console.log("   - /admin pour le dashboard");
    console.log("   - /admin/articles pour le CMS");
    console.log("   - /blog pour le blog public");

    // D√©marrer le serveur
    execSync('npm run dev', { stdio: 'inherit' });

  } catch (error) {
    console.error("‚ùå Erreur lors de la correction :", error.message);
    process.exit(1);
  }
}

fixImportsAndStart();
