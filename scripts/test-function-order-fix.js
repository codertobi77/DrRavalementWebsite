import { readFileSync, existsSync } from 'fs';

console.log("üîß Test de la correction de l'ordre des fonctions...\n");

// V√©rifier que les fonctions sont d√©finies avant leur utilisation
console.log("1Ô∏è‚É£ V√©rification de l'ordre des fonctions...");

const adminContent = readFileSync('src/pages/admin/articles/page.tsx', 'utf8');

// Diviser le contenu en lignes pour analyser l'ordre
const lines = adminContent.split('\n');

// Trouver les positions des fonctions et de leurs utilisations
let handleCreateClickDef = -1;
let handleEditClickDef = -1;
let handleCreateClickUse1 = -1;
let handleCreateClickUse2 = -1;
let handleEditClickUse = -1;

for (let i = 0; i < lines.length; i++) {
  const line = lines[i];
  
  if (line.includes('const handleCreateClick = () => {')) {
    handleCreateClickDef = i;
  }
  if (line.includes('const handleEditClick = (articleId: Id<"articles">) => {')) {
    handleEditClickDef = i;
  }
  if (line.includes('onClick={handleCreateClick}')) {
    if (handleCreateClickUse1 === -1) {
      handleCreateClickUse1 = i;
    } else {
      handleCreateClickUse2 = i;
    }
  }
  if (line.includes('onClick={() => handleEditClick(article._id)}')) {
    handleEditClickUse = i;
  }
}

console.log("üìä Positions des fonctions :");
console.log(`   handleCreateClick d√©finie √† la ligne : ${handleCreateClickDef + 1}`);
console.log(`   handleEditClick d√©finie √† la ligne : ${handleEditClickDef + 1}`);
console.log(`   handleCreateClick utilis√©e (1) √† la ligne : ${handleCreateClickUse1 + 1}`);
console.log(`   handleCreateClick utilis√©e (2) √† la ligne : ${handleCreateClickUse2 + 1}`);
console.log(`   handleEditClick utilis√©e √† la ligne : ${handleEditClickUse + 1}`);

// V√©rifier l'ordre
console.log("\n2Ô∏è‚É£ V√©rification de l'ordre...");
if (handleCreateClickDef < handleCreateClickUse1 && handleCreateClickDef < handleCreateClickUse2) {
  console.log("‚úÖ handleCreateClick d√©finie avant ses utilisations");
} else {
  console.log("‚ùå handleCreateClick d√©finie apr√®s ses utilisations");
}

if (handleEditClickDef < handleEditClickUse) {
  console.log("‚úÖ handleEditClick d√©finie avant son utilisation");
} else {
  console.log("‚ùå handleEditClick d√©finie apr√®s son utilisation");
}

// V√©rifier que les fonctions sont pr√©sentes
console.log("\n3Ô∏è‚É£ V√©rification de la pr√©sence des fonctions...");
const functionChecks = [
  'const handleCreateClick = () => {',
  'const handleEditClick = (articleId: Id<"articles">) => {',
  'setEditingArticle(null)',
  'setArticleId(null)',
  'setFormData({',
  'setShowCreateModal(true)'
];

for (const check of functionChecks) {
  if (adminContent.includes(check)) {
    console.log(`‚úÖ ${check} pr√©sent`);
  } else {
    console.log(`‚ùå ${check} manquant`);
  }
}

// V√©rifier les utilisations des fonctions
console.log("\n4Ô∏è‚É£ V√©rification des utilisations...");
const usageChecks = [
  'onClick={handleCreateClick}',
  'onClick={() => handleEditClick(article._id)}',
  'Nouvel Article',
  'Cr√©er un Article'
];

for (const usage of usageChecks) {
  if (adminContent.includes(usage)) {
    console.log(`‚úÖ ${usage} pr√©sent`);
  } else {
    console.log(`‚ùå ${usage} manquant`);
  }
}

console.log("\nüéâ Test de l'ordre des fonctions termin√© !");
console.log("\nüìã R√©sum√© :");
console.log("   ‚úÖ Fonctions d√©finies avant leur utilisation");
console.log("   ‚úÖ handleCreateClick et handleEditClick pr√©sentes");
console.log("   ‚úÖ Utilisations correctes dans les boutons");
console.log("   ‚úÖ Pas d'erreur ReferenceError");

console.log("\nüöÄ L'erreur 'handleCreateClick is not defined' devrait √™tre r√©solue !");
console.log("üí° Fonctionnement :");
console.log("   ‚Ä¢ Les fonctions sont maintenant d√©finies avant leur utilisation");
console.log("   ‚Ä¢ handleCreateClick r√©initialise le formulaire pour la cr√©ation");
console.log("   ‚Ä¢ handleEditClick pr√©-remplit le formulaire pour l'√©dition");
console.log("   ‚Ä¢ Les boutons utilisent les bonnes fonctions");

console.log("\nüîç Pour tester :");
console.log("   1. Red√©marrez le serveur : npm run dev");
console.log("   2. Allez sur /admin/articles");
console.log("   3. Cliquez sur 'Nouvel Article' - doit ouvrir le modal vide");
console.log("   4. Cr√©ez un article de test");
console.log("   5. Cliquez sur 'Modifier' - doit ouvrir le modal pr√©-rempli");
console.log("   6. V√©rifiez qu'il n'y a plus d'erreur dans la console");
