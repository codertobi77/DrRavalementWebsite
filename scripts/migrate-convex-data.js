#!/usr/bin/env node

/**
 * Script interactif de migration des donn√©es Convex
 * Guide complet pour migrer les donn√©es de dev vers prod
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { execSync } from 'child_process';
import readline from 'readline';

// Obtenir __dirname en ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üöÄ Migration des Donn√©es Convex (Dev ‚Üí Prod)');
console.log('='.repeat(50));
console.log('');

// Fonction pour lire le .env
function getEnvConfig() {
  const envFile = path.join(__dirname, '..', '.env');
  
  if (!fs.existsSync(envFile)) {
    console.error('‚ùå Fichier .env introuvable');
    process.exit(1);
  }

  const envContent = fs.readFileSync(envFile, 'utf8');
  
  const devUrlMatch = envContent.match(/VITE_CONVEX_URL=(.+)/);
  const prodUrlMatch = envContent.match(/CONVEX_URL_PROD=(.+)/);
  
  return {
    devUrl: devUrlMatch ? devUrlMatch[1].trim() : null,
    prodUrl: prodUrlMatch ? prodUrlMatch[1].trim() : null,
  };
}

// Afficher la configuration actuelle
const config = getEnvConfig();

console.log('üìã Configuration actuelle:');
console.log(`   Dev: ${config.devUrl || '‚ùå Non configur√©'}`);
console.log(`   Prod: ${config.prodUrl || '‚ùå Non configur√©'}`);
console.log('');

// √âtape 1 : Export depuis Dev
console.log('üì§ √âTAPE 1 : Export des donn√©es depuis Dev');
console.log('-'.repeat(50));

if (!config.devUrl || config.devUrl.includes('your-')) {
  console.log('‚ùå URL Convex dev non configur√©e');
  console.log('   Configurez VITE_CONVEX_URL dans .env');
  process.exit(1);
}

console.log('üîç Export des donn√©es...');
try {
  execSync('node scripts/export-convex-data.js', { stdio: 'inherit' });
  console.log('');
} catch (error) {
  console.error('‚ùå Erreur lors de l\'export');
  process.exit(1);
}

// V√©rifier que le fichier de backup existe
const backupFile = path.join(__dirname, '..', 'convex-data-backup.json');
if (!fs.existsSync(backupFile)) {
  console.error('‚ùå Fichier de backup non cr√©√©');
  process.exit(1);
}

const backup = JSON.parse(fs.readFileSync(backupFile, 'utf8'));
console.log(`‚úÖ ${backup.metadata.totalDocuments} documents export√©s\n`);

// √âtape 2 : D√©ployer vers Prod
console.log('üöÄ √âTAPE 2 : D√©ploiement vers Production');
console.log('-'.repeat(50));

console.log('‚ö†Ô∏è  Cette √©tape va d√©ployer votre sch√©ma et fonctions vers prod');
console.log('üìù Assurez-vous que votre code est pr√™t pour la production\n');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

rl.question('Continuer le d√©ploiement vers prod ? (oui/non): ', (answer) => {
  if (answer.toLowerCase() !== 'oui' && answer.toLowerCase() !== 'o' && answer.toLowerCase() !== 'yes' && answer.toLowerCase() !== 'y') {
    console.log('‚ùå D√©ploiement annul√©');
    rl.close();
    process.exit(0);
  }

  console.log('');
  console.log('üîÑ D√©ploiement en cours...');
  
  try {
    execSync('npx convex deploy', { stdio: 'inherit' });
    console.log('');
    console.log('‚úÖ D√©ploiement r√©ussi\n');
  } catch (error) {
    console.error('‚ùå Erreur lors du d√©ploiement');
    rl.close();
    process.exit(1);
  }

  // √âtape 3 : Import dans Prod
  console.log('üì• √âTAPE 3 : Import des donn√©es dans Production');
  console.log('-'.repeat(50));
  
  console.log('‚ö†Ô∏è  Cette √©tape va √©craser les donn√©es existantes en prod');
  console.log('üìù Le fichier de backup sera utilis√© pour l\'import\n');
  
  rl.question('Importer les donn√©es dans prod ? (oui/non): ', (answer2) => {
    if (answer2.toLowerCase() !== 'oui' && answer2.toLowerCase() !== 'o' && answer2.toLowerCase() !== 'yes' && answer2.toLowerCase() !== 'y') {
      console.log('‚ùå Import annul√©');
      rl.close();
      process.exit(0);
    }

    console.log('');
    console.log('üîÑ Import en cours...');
    
    try {
      execSync('node scripts/import-convex-data.js --prod --force', { stdio: 'inherit' });
      console.log('');
      console.log('‚úÖ Migration compl√®te termin√©e !\n');
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'import');
      rl.close();
      process.exit(1);
    }

    // R√©sum√© final
    console.log('üéâ Migration R√©ussie !');
    console.log('='.repeat(50));
    console.log('');
    console.log('üìã Prochaines √©tapes:');
    console.log('   1. V√©rifiez votre application en production');
    console.log('   2. Testez les fonctionnalit√©s principales');
    console.log('   3. V√©rifiez les images et fichiers m√©dias');
    console.log('   4. Connectez-vous √† l\'admin et v√©rifiez les comptes\n');
    
    rl.close();
  });
});

