import { readFileSync, existsSync } from 'fs';

console.log("üß™ Test de l'√©diteur de texte riche...\n");

// V√©rifier les fichiers cr√©√©s
console.log("1Ô∏è‚É£ V√©rification des fichiers...");
const filesToCheck = [
  'src/components/admin/RichTextEditor.tsx',
  'src/components/blog/FormattedContent.tsx',
  'src/pages/admin/articles/page.tsx',
  'src/components/blog/ArticleModal.tsx'
];

for (const file of filesToCheck) {
  if (existsSync(file)) {
    console.log(`‚úÖ ${file} existe`);
  } else {
    console.log(`‚ùå ${file} manquant`);
    process.exit(1);
  }
}

// V√©rifier RichTextEditor
console.log("\n2Ô∏è‚É£ V√©rification de RichTextEditor...");
const editorContent = readFileSync('src/components/admin/RichTextEditor.tsx', 'utf8');

const editorFeatures = [
  'contentEditable',
  'execCommand',
  'ToolButton',
  'bold',
  'italic',
  'underline',
  'formatBlock',
  'insertUnorderedList',
  'insertOrderedList',
  'justifyLeft',
  'justifyCenter',
  'justifyRight',
  'foreColor',
  'backColor',
  'removeFormat',
  'undo',
  'redo'
];

for (const feature of editorFeatures) {
  if (editorContent.includes(feature)) {
    console.log(`‚úÖ ${feature} pr√©sent`);
  } else {
    console.log(`‚ùå ${feature} manquant`);
  }
}

// V√©rifier les outils de formatage
console.log("\n3Ô∏è‚É£ V√©rification des outils de formatage...");
const formattingTools = [
  'ri-bold',
  'ri-italic',
  'ri-underline',
  'ri-strikethrough',
  'ri-h-1',
  'ri-h-2',
  'ri-h-3',
  'ri-paragraph',
  'ri-list-unordered',
  'ri-list-ordered',
  'ri-align-left',
  'ri-align-center',
  'ri-align-right',
  'ri-align-justify',
  'ri-text',
  'ri-text-color',
  'ri-format-clear',
  'ri-arrow-go-back-line',
  'ri-arrow-go-forward-line'
];

for (const tool of formattingTools) {
  if (editorContent.includes(tool)) {
    console.log(`‚úÖ ${tool} pr√©sent`);
  } else {
    console.log(`‚ùå ${tool} manquant`);
  }
}

// V√©rifier FormattedContent
console.log("\n4Ô∏è‚É£ V√©rification de FormattedContent...");
const formattedContent = readFileSync('src/components/blog/FormattedContent.tsx', 'utf8');

if (formattedContent.includes('dangerouslySetInnerHTML')) {
  console.log("‚úÖ Rendu HTML activ√©");
} else {
  console.log("‚ùå Rendu HTML manquant");
}

if (formattedContent.includes('prose prose-lg')) {
  console.log("‚úÖ Styles Tailwind appliqu√©s");
} else {
  console.log("‚ùå Styles Tailwind manquants");
}

// V√©rifier l'int√©gration dans la page admin
console.log("\n5Ô∏è‚É£ V√©rification de l'int√©gration admin...");
const adminContent = readFileSync('src/pages/admin/articles/page.tsx', 'utf8');

if (adminContent.includes('RichTextEditor')) {
  console.log("‚úÖ RichTextEditor import√© dans la page admin");
} else {
  console.log("‚ùå RichTextEditor non import√©");
}

if (adminContent.includes('<RichTextEditor')) {
  console.log("‚úÖ RichTextEditor utilis√© dans le formulaire");
} else {
  console.log("‚ùå RichTextEditor non utilis√©");
}

// V√©rifier l'int√©gration dans le modal
console.log("\n6Ô∏è‚É£ V√©rification de l'int√©gration modal...");
const modalContent = readFileSync('src/components/blog/ArticleModal.tsx', 'utf8');

if (modalContent.includes('FormattedContent')) {
  console.log("‚úÖ FormattedContent import√© dans le modal");
} else {
  console.log("‚ùå FormattedContent non import√©");
}

if (modalContent.includes('<FormattedContent')) {
  console.log("‚úÖ FormattedContent utilis√© dans le modal");
} else {
  console.log("‚ùå FormattedContent non utilis√©");
}

// V√©rifier la suppression du rendu markdown
if (modalContent.includes('renderContent')) {
  console.log("‚ùå Ancien rendu markdown encore pr√©sent");
} else {
  console.log("‚úÖ Ancien rendu markdown supprim√©");
}

console.log("\nüéâ Test de l'√©diteur de texte riche termin√© !");
console.log("\nüìã R√©sum√© :");
console.log("   ‚úÖ RichTextEditor cr√©√© avec tous les outils");
console.log("   ‚úÖ FormattedContent pour l'affichage");
console.log("   ‚úÖ Int√©gration dans la page admin");
console.log("   ‚úÖ Int√©gration dans le modal blog");
console.log("   ‚úÖ Rendu HTML au lieu de markdown");

console.log("\nüöÄ Fonctionnalit√©s de l'√©diteur :");
console.log("   üìù Formatage de base (gras, italique, soulign√©, barr√©)");
console.log("   üìã Titres (H1, H2, H3, paragraphe)");
console.log("   üìã Listes (√† puces et num√©rot√©es)");
console.log("   üìê Alignement (gauche, centre, droite, justifi√©)");
console.log("   üé® Couleurs (texte et fond)");
console.log("   üîÑ Actions (annuler, refaire, supprimer format)");
console.log("   üì± Interface responsive");

console.log("\nüí° Pour tester :");
console.log("   1. D√©marrez le serveur : npm run dev");
console.log("   2. Allez sur /admin/articles");
console.log("   3. Cr√©ez un nouvel article");
console.log("   4. Utilisez les outils de formatage");
console.log("   5. Sauvegardez et v√©rifiez sur /blog");
