import { readFileSync, existsSync } from 'fs';
import { join } from 'path';

console.log("üß™ Test final des imports...\n");

// V√©rifier la configuration Vite
console.log("1Ô∏è‚É£ V√©rification de la configuration Vite...");
const viteConfigPath = 'vite.config.ts';
if (!existsSync(viteConfigPath)) {
  console.log("‚ùå Fichier vite.config.ts non trouv√©");
  process.exit(1);
}

const viteConfig = readFileSync(viteConfigPath, 'utf8');
if (viteConfig.includes("'convex/_generated': resolve(__dirname, './convex/_generated')")) {
  console.log("‚úÖ Alias Convex/_generated configur√©");
} else {
  console.log("‚ùå Alias Convex/_generated manquant");
  process.exit(1);
}

// V√©rifier que convex/react n'est pas alias√©
if (viteConfig.includes("'convex': resolve(__dirname, './convex')")) {
  console.log("‚ùå Alias 'convex' global d√©tect√© - cela interf√®re avec convex/react");
  console.log("üí° Utilisez 'convex/_generated' au lieu de 'convex'");
  process.exit(1);
} else {
  console.log("‚úÖ Pas d'alias 'convex' global - convex/react fonctionnera");
}

// V√©rifier les fichiers g√©n√©r√©s
console.log("\n2Ô∏è‚É£ V√©rification des fichiers g√©n√©r√©s...");
const generatedFiles = [
  'convex/_generated/api.d.ts',
  'convex/_generated/api.js',
  'convex/_generated/dataModel.d.ts'
];

for (const file of generatedFiles) {
  if (existsSync(file)) {
    console.log(`‚úÖ ${file} existe`);
  } else {
    console.log(`‚ùå ${file} manquant`);
    process.exit(1);
  }
}

// V√©rifier les imports dans App.tsx
console.log("\n3Ô∏è‚É£ V√©rification des imports dans App.tsx...");
const appPath = 'src/App.tsx';
if (!existsSync(appPath)) {
  console.log("‚ùå src/App.tsx non trouv√©");
  process.exit(1);
}

const appContent = readFileSync(appPath, 'utf8');
if (appContent.includes("from 'convex/react'")) {
  console.log("‚úÖ Import convex/react correct");
} else {
  console.log("‚ùå Import convex/react manquant ou incorrect");
  process.exit(1);
}

// V√©rifier les imports dans les pages admin
console.log("\n4Ô∏è‚É£ V√©rification des imports admin...");
const adminFiles = [
  'src/pages/admin/articles/page.tsx',
  'src/pages/blog/page.tsx'
];

for (const file of adminFiles) {
  if (existsSync(file)) {
    const content = readFileSync(file, 'utf8');
    if (content.includes("from 'convex/_generated/api'")) {
      console.log(`‚úÖ ${file} utilise l'alias correct`);
    } else {
      console.log(`‚ùå ${file} n'utilise pas l'alias correct`);
      process.exit(1);
    }
  }
}

// Test de r√©solution des modules
console.log("\n5Ô∏è‚É£ Test de r√©solution des modules...");
try {
  // Test convex/react
  const { ConvexProvider } = await import("convex/react");
  console.log("‚úÖ convex/react r√©solu correctement");
} catch (error) {
  console.log(`‚ùå Erreur convex/react : ${error.message}`);
  process.exit(1);
}

try {
  // Test convex/_generated
  const { api } = await import("convex/_generated/api");
  console.log("‚úÖ convex/_generated/api r√©solu correctement");
} catch (error) {
  console.log(`‚ùå Erreur convex/_generated : ${error.message}`);
  process.exit(1);
}

console.log("\nüéâ Tous les tests sont pass√©s !");
console.log("\nüìã Configuration valid√©e :");
console.log("   ‚úÖ Alias 'convex/_generated' configur√©");
console.log("   ‚úÖ Pas d'alias 'convex' global");
console.log("   ‚úÖ convex/react fonctionne");
console.log("   ‚úÖ convex/_generated fonctionne");
console.log("   ‚úÖ Fichiers g√©n√©r√©s pr√©sents");

console.log("\nüöÄ Le serveur devrait maintenant d√©marrer sans erreur !");
console.log("üí° Ex√©cutez : npm run dev");
