import { ConvexHttpClient } from "convex/browser";

// Configuration Convex
const CONVEX_URL = process.env.VITE_CONVEX_URL || "https://your-convex-deployment.convex.cloud";

const client = new ConvexHttpClient(CONVEX_URL);

async function testArticlesCMS() {
  console.log("üß™ Test du syst√®me CMS Articles...\n");

  try {
    // Test 1: R√©cup√©rer tous les articles
    console.log("1Ô∏è‚É£ Test de r√©cup√©ration des articles...");
    const articles = await client.query("articles:getArticles", {});
    console.log(`‚úÖ ${articles.length} articles trouv√©s`);

    // Test 2: R√©cup√©rer les articles publi√©s
    console.log("\n2Ô∏è‚É£ Test des articles publi√©s...");
    const publishedArticles = await client.query("articles:getArticles", {
      status: "published"
    });
    console.log(`‚úÖ ${publishedArticles.length} articles publi√©s`);

    // Test 3: R√©cup√©rer les cat√©gories
    console.log("\n3Ô∏è‚É£ Test des cat√©gories...");
    const categories = await client.query("articles:getArticleCategories", {});
    console.log(`‚úÖ Cat√©gories trouv√©es : ${categories.join(", ")}`);

    // Test 4: R√©cup√©rer les statistiques
    console.log("\n4Ô∏è‚É£ Test des statistiques...");
    const stats = await client.query("articles:getArticleStats", {});
    console.log("‚úÖ Statistiques :");
    console.log(`   - Total articles : ${stats.total}`);
    console.log(`   - Publi√©s : ${stats.published}`);
    console.log(`   - Brouillons : ${stats.draft}`);
    console.log(`   - √Ä la une : ${stats.featured}`);
    console.log(`   - Vues totales : ${stats.totalViews}`);
    console.log(`   - Cat√©gories : ${stats.categories}`);

    // Test 5: R√©cup√©rer un article par slug (si des articles existent)
    if (articles.length > 0) {
      console.log("\n5Ô∏è‚É£ Test de r√©cup√©ration par slug...");
      const firstArticle = articles[0];
      const articleBySlug = await client.query("articles:getArticleBySlug", {
        slug: firstArticle.slug
      });
      
      if (articleBySlug) {
        console.log(`‚úÖ Article trouv√© par slug : ${articleBySlug.title}`);
        console.log(`   - Vues : ${articleBySlug.view_count}`);
      } else {
        console.log("‚ùå Aucun article trouv√© par slug");
      }
    }

    // Test 6: R√©cup√©rer les articles populaires
    console.log("\n6Ô∏è‚É£ Test des articles populaires...");
    const popularArticles = await client.query("articles:getPopularArticles", {
      limit: 3
    });
    console.log(`‚úÖ ${popularArticles.length} articles populaires trouv√©s`);

    // Test 7: Test de cr√©ation d'un article de test
    console.log("\n7Ô∏è‚É£ Test de cr√©ation d'un article...");
    const testArticleId = await client.mutation("articles:createArticle", {
      title: "Article de Test CMS",
      excerpt: "Ceci est un article de test pour v√©rifier le fonctionnement du CMS.",
      content: "# Article de Test\n\nCeci est un article de test cr√©√© automatiquement pour v√©rifier le bon fonctionnement du syst√®me CMS.",
      featured_image: "https://images.pexels.com/photos/1115804/pexels-photo-1115804.jpeg?auto=compress&cs=tinysrgb&w=600",
      category: "Test",
      tags: ["test", "cms", "article"],
      status: "draft",
      is_featured: false,
    });
    console.log(`‚úÖ Article de test cr√©√© avec l'ID : ${testArticleId}`);

    // Test 8: Test de mise √† jour de l'article
    console.log("\n8Ô∏è‚É£ Test de mise √† jour de l'article...");
    await client.mutation("articles:updateArticle", {
      id: testArticleId,
      status: "published",
      is_featured: true,
    });
    console.log("‚úÖ Article de test mis √† jour (publi√© et mis √† la une)");

    // Test 9: Test de suppression de l'article de test
    console.log("\n9Ô∏è‚É£ Test de suppression de l'article...");
    await client.mutation("articles:deleteArticle", {
      id: testArticleId
    });
    console.log("‚úÖ Article de test supprim√©");

    console.log("\nüéâ Tous les tests sont pass√©s avec succ√®s !");
    console.log("\nüìã R√©sum√© du syst√®me CMS Articles :");
    console.log("   ‚úÖ CRUD complet (Create, Read, Update, Delete)");
    console.log("   ‚úÖ Filtrage par statut et cat√©gorie");
    console.log("   ‚úÖ Gestion des slugs automatiques");
    console.log("   ‚úÖ Calcul automatique du temps de lecture");
    console.log("   ‚úÖ Syst√®me de vues");
    console.log("   ‚úÖ Articles √† la une");
    console.log("   ‚úÖ Statistiques compl√®tes");
    console.log("   ‚úÖ Gestion des tags");
    console.log("   ‚úÖ SEO (meta title, description)");

  } catch (error) {
    console.error("‚ùå Erreur lors des tests :", error);
    console.error("üí° V√©rifiez que :");
    console.error("   - Convex est correctement configur√©");
    console.error("   - Les fonctions articles sont d√©ploy√©es");
    console.error("   - La variable VITE_CONVEX_URL est d√©finie");
  }
}

// Ex√©cution du script
testArticlesCMS();

export { testArticlesCMS };
