/**
 * Script pour ajouter des objectifs aux services existants
 * 
 * Ce script met √† jour les services existants en ajoutant des objectifs appropri√©s
 * bas√©s sur le titre et la description de chaque service.
 */


import { api } from "../convex/_generated/api.js";

// Configuration
import { ConvexHttpClient } from "convex/browser";
import { readFileSync } from 'fs';

// Lire le fichier .env
const envContent = readFileSync('.env', 'utf8');
const envVars = {};
envContent.split('\n').forEach(line => {
  const [key, value] = line.split('=');
  if (key && value) {
    envVars[key.trim()] = value.trim();
  }
});

const CONVEX_URL = envVars.VITE_CONVEX_URL;

if (!CONVEX_URL || CONVEX_URL.includes("your-convex-deployment")) {
  console.error("‚ùå VITE_CONVEX_URL non configur√© dans .env");
  process.exit(1);
}
// Objectifs pr√©d√©finis bas√©s sur les types de services
const SERVICE_OBJECTIVES = {
  // Services de ravalement
  "ravalement": "Am√©liorer l'esth√©tique et la durabilit√© de votre fa√ßade tout en la prot√©geant contre les intemp√©ries",
  "fa√ßade": "Prot√©ger et embellir votre fa√ßade pour pr√©server la valeur de votre bien immobilier",
  "enduit": "Appliquer un enduit d√©coratif pour transformer l'apparence de votre b√¢timent",
  "peinture": "Donner une nouvelle vie √† votre fa√ßade avec une peinture de qualit√© professionnelle",
  
  // Services de ma√ßonnerie
  "ma√ßonnerie": "Renforcer la structure et r√©parer les √©l√©ments de ma√ßonnerie pour assurer la solidit√© du b√¢timent",
  "mur": "R√©parer et consolider les murs pour garantir la stabilit√© de la construction",
  "pierre": "Restaurer la beaut√© et l'int√©grit√© des √©l√©ments en pierre de taille",
  "brique": "R√©parer et entretenir les structures en brique pour maintenir leur solidit√©",
  
  // Services de couverture
  "couverture": "Prot√©ger votre toit contre les intemp√©ries et am√©liorer l'isolation thermique",
  "toiture": "Assurer l'√©tanch√©it√© et la durabilit√© de votre toiture",
  "toit": "Maintenir l'int√©grit√© de votre toit pour prot√©ger votre habitation",
  "tuile": "Remplacer et r√©parer les tuiles pour garantir l'√©tanch√©it√©",
  
  // Services d'isolation
  "isolation": "Am√©liorer l'efficacit√© √©nerg√©tique et le confort thermique de votre habitation",
  "thermique": "R√©duire les d√©perditions de chaleur pour diminuer vos factures √©nerg√©tiques",
  "isoler": "Cr√©er une barri√®re thermique efficace pour un meilleur confort",
  
  // Services de r√©novation
  "r√©novation": "Transformer et moderniser votre espace pour am√©liorer votre qualit√© de vie",
  "renovation": "Remettre √† neuf votre b√¢timent en respectant les normes actuelles",
  "restauration": "Pr√©server le caract√®re authentique tout en modernisant les installations",
  
  // Services g√©n√©raux
  "r√©paration": "R√©parer et entretenir les √©l√©ments d√©fectueux pour maintenir la qualit√©",
  "reparation": "Corriger les probl√®mes existants pour assurer la durabilit√©",
  "entretien": "Maintenir en bon √©tat les √©l√©ments de votre b√¢timent",
  "maintenance": "Pr√©venir les d√©gradations et prolonger la dur√©e de vie des installations"
};

// Objectifs par d√©faut si aucun mot-cl√© n'est trouv√©
const DEFAULT_OBJECTIVES = [
  "Am√©liorer la qualit√© et la durabilit√© de votre installation",
  "Assurer la protection et l'esth√©tique de votre b√¢timent",
  "Optimiser les performances et l'efficacit√© de votre syst√®me",
  "Renforcer la structure et pr√©server la valeur de votre bien",
  "Moderniser et am√©liorer le confort de votre espace"
];

/**
 * G√©n√®re un objectif bas√© sur le titre et la description du service
 */
function generateObjective(title, description) {
  const text = `${title} ${description}`.toLowerCase();
  
  // Chercher des mots-cl√©s dans le texte
  for (const [keyword, objective] of Object.entries(SERVICE_OBJECTIVES)) {
    if (text.includes(keyword)) {
      return objective;
    }
  }
  
  // Si aucun mot-cl√© n'est trouv√©, utiliser un objectif par d√©faut
  const randomIndex = Math.floor(Math.random() * DEFAULT_OBJECTIVES.length);
  return DEFAULT_OBJECTIVES[randomIndex];
}

/**
 * Met √† jour les services existants avec des objectifs
 */
async function updateServicesWithObjectives() {
  const client = new ConvexHttpClient(CONVEX_URL);
  
  try {
    console.log("üîÑ R√©cup√©ration des services existants...");
    
    // R√©cup√©rer tous les services
    const services = await client.query(api.cms.getServices, {});
    
    if (!services || services.length === 0) {
      console.log("‚ùå Aucun service trouv√© dans la base de donn√©es");
      return;
    }
    
    console.log(`üìã ${services.length} service(s) trouv√©(s)`);
    
    let updatedCount = 0;
    let skippedCount = 0;
    
    for (const service of services) {
      // V√©rifier si le service a d√©j√† un objectif
      if (service.objective && service.objective.trim() !== '') {
        console.log(`‚è≠Ô∏è  Service "${service.title}" a d√©j√† un objectif, ignor√©`);
        skippedCount++;
        continue;
      }
      
      // G√©n√©rer un objectif
      const objective = generateObjective(service.title, service.description);
      
      console.log(`üîÑ Mise √† jour du service "${service.title}"...`);
      console.log(`   Objectif: ${objective}`);
      
      try {
        // Mettre √† jour le service
        await client.mutation(api.cms.updateService, {
          id: service._id,
          objective: objective
        });
        
        console.log(`‚úÖ Service "${service.title}" mis √† jour avec succ√®s`);
        updatedCount++;
        
        // Petite pause pour √©viter de surcharger l'API
        await new Promise(resolve => setTimeout(resolve, 100));
        
      } catch (error) {
        console.error(`‚ùå Erreur lors de la mise √† jour du service "${service.title}":`, error);
      }
    }
    
    console.log("\nüìä R√©sum√© de l'op√©ration:");
    console.log(`   ‚úÖ Services mis √† jour: ${updatedCount}`);
    console.log(`   ‚è≠Ô∏è  Services ignor√©s: ${skippedCount}`);
    console.log(`   üìã Total trait√©: ${services.length}`);
    
  } catch (error) {
    console.error("‚ùå Erreur lors de l'ex√©cution du script:", error);
    process.exit(1);
  }
}

/**
 * Affiche les services existants sans les modifier (mode preview)
 */
async function previewServices() {
  const client = new ConvexHttpClient(CONVEX_URL);
  
  try {
    console.log("üîç Mode preview - Affichage des services existants...\n");
    
    const services = await client.query(api.cms.getServices, {});
    
    if (!services || services.length === 0) {
      console.log("‚ùå Aucun service trouv√© dans la base de donn√©es");
      return;
    }
    
    services.forEach((service, index) => {
      console.log(`${index + 1}. ${service.title}`);
      console.log(`   Description: ${service.description.substring(0, 100)}...`);
      console.log(`   Objectif actuel: ${service.objective || 'Aucun'}`);
      console.log(`   Objectif propos√©: ${generateObjective(service.title, service.description)}`);
      console.log("---");
    });
    
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des services:", error);
  }
}

// Fonction principale
async function main() {
  const args = process.argv.slice(2);
  const command = args[0];
  
  console.log("üöÄ Script de mise √† jour des objectifs des services\n");
  
  if (command === 'preview') {
    await previewServices();
  } else if (command === 'update') {
    console.log("‚ö†Ô∏è  ATTENTION: Cette op√©ration va modifier la base de donn√©es!");
    console.log("   Appuyez sur Ctrl+C pour annuler, ou attendez 5 secondes...\n");
    
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    await updateServicesWithObjectives();
  } else {
    console.log("Usage:");
    console.log("  node update-services-objectives.js preview  - Afficher les services sans les modifier");
    console.log("  node update-services-objectives.js update   - Mettre √† jour les services");
    console.log("\nExemples:");
    console.log("  npm run update-objectives preview");
    console.log("  npm run update-objectives update");
  }
}

// Gestion des erreurs non captur√©es
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Erreur non g√©r√©e:', reason);
  process.exit(1);
});

process.on('uncaughtException', (error) => {
  console.error('‚ùå Exception non captur√©e:', error);
  process.exit(1);
});

// Ex√©cuter le script
main().catch(console.error);
