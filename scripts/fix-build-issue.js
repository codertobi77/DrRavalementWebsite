import { readFileSync, existsSync, writeFileSync } from 'fs';
import { execSync } from 'child_process';

console.log("üîß Diagnostic et correction du probl√®me de build...\n");

// V√©rifier les fichiers Convex g√©n√©r√©s
console.log("1Ô∏è‚É£ V√©rification des fichiers Convex g√©n√©r√©s...");

const generatedFiles = [
  'convex/_generated/api.d.ts',
  'convex/_generated/api.js',
  'convex/_generated/dataModel.d.ts',
  'convex/_generated/dataModel.js',
  'convex/_generated/server.d.ts',
  'convex/_generated/server.js'
];

for (const file of generatedFiles) {
  if (existsSync(file)) {
    console.log(`‚úÖ ${file} existe`);
  } else {
    console.log(`‚ùå ${file} manquant`);
  }
}

// V√©rifier les imports dans les fichiers source
console.log("\n2Ô∏è‚É£ V√©rification des imports...");

const sourceFiles = [
  'src/pages/blog/page.tsx',
  'src/pages/admin/articles/page.tsx',
  'src/components/blog/ArticleModal.tsx'
];

for (const file of sourceFiles) {
  if (existsSync(file)) {
    const content = readFileSync(file, 'utf8');
    if (content.includes("from 'convex/_generated/dataModel'")) {
      console.log(`‚ùå ${file} utilise l'ancien import`);
    } else if (content.includes("from 'convex/_generated/dataModel.js'")) {
      console.log(`‚úÖ ${file} utilise le bon import`);
    } else {
      console.log(`‚ö†Ô∏è  ${file} n'importe pas dataModel`);
    }
  } else {
    console.log(`‚ùå ${file} non trouv√©`);
  }
}

// V√©rifier la configuration Vite
console.log("\n3Ô∏è‚É£ V√©rification de la configuration Vite...");

if (existsSync('vite.config.ts')) {
  const viteConfig = readFileSync('vite.config.ts', 'utf8');
  if (viteConfig.includes("'convex/_generated': resolve(__dirname, './convex/_generated')")) {
    console.log("‚úÖ Alias Convex configur√© dans Vite");
  } else {
    console.log("‚ùå Alias Convex manquant dans Vite");
  }
} else {
  console.log("‚ùå vite.config.ts non trouv√©");
}

// V√©rifier la configuration Convex
console.log("\n4Ô∏è‚É£ V√©rification de la configuration Convex...");

if (existsSync('convex.json')) {
  console.log("‚úÖ convex.json existe");
} else {
  console.log("‚ùå convex.json manquant");
}

// Essayer de r√©g√©n√©rer les fichiers Convex
console.log("\n5Ô∏è‚É£ Tentative de r√©g√©n√©ration des fichiers Convex...");

try {
  console.log("üîÑ Ex√©cution de npx convex dev --once...");
  execSync('npx convex dev --once', { stdio: 'pipe' });
  console.log("‚úÖ Fichiers Convex r√©g√©n√©r√©s");
} catch (error) {
  console.log(`‚ùå Erreur lors de la r√©g√©n√©ration : ${error.message}`);
}

// V√©rifier √† nouveau les fichiers apr√®s r√©g√©n√©ration
console.log("\n6Ô∏è‚É£ V√©rification apr√®s r√©g√©n√©ration...");

for (const file of generatedFiles) {
  if (existsSync(file)) {
    console.log(`‚úÖ ${file} existe`);
  } else {
    console.log(`‚ùå ${file} manquant`);
  }
}

// Essayer de construire le projet
console.log("\n7Ô∏è‚É£ Tentative de build...");

try {
  console.log("üîÑ Ex√©cution de npm run build...");
  execSync('npm run build', { stdio: 'pipe' });
  console.log("‚úÖ Build r√©ussi !");
} catch (error) {
  console.log(`‚ùå Erreur de build : ${error.message}`);
  
  // Afficher les derni√®res lignes de l'erreur
  const errorLines = error.message.split('\n');
  const lastLines = errorLines.slice(-10);
  console.log("\nüìã Derni√®res lignes de l'erreur :");
  lastLines.forEach(line => console.log(line));
}

console.log("\nüéâ Diagnostic termin√© !");
console.log("\nüí° Solutions possibles :");
console.log("   1. V√©rifiez que Convex est correctement configur√©");
console.log("   2. R√©g√©n√©rez les fichiers avec : npx convex dev --once");
console.log("   3. V√©rifiez que tous les imports utilisent l'extension .js");
console.log("   4. Red√©marrez le serveur de d√©veloppement");
