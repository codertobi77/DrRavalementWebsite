import { ConvexHttpClient } from "convex/browser";
import { readFileSync } from 'fs';

// Lire le fichier .env
const envContent = readFileSync('.env', 'utf8');
const envVars = {};
envContent.split('\n').forEach(line => {
  const [key, value] = line.split('=');
  if (key && value) {
    envVars[key.trim()] = value.trim();
  }
});

const client = new ConvexHttpClient(envVars.VITE_CONVEX_URL);

async function cleanDuplicateData() {
  console.log("üßπ Nettoyage des donn√©es dupliqu√©es CMS...\n");

  try {
    // Nettoyer les statistiques dupliqu√©es
    console.log("üìä Nettoyage des statistiques...");
    const stats = await client.query("cms:getStatistics");
    const uniqueStats = [];
    const seenKeys = new Set();
    
    for (const stat of stats) {
      if (!seenKeys.has(stat.key)) {
        seenKeys.add(stat.key);
        uniqueStats.push(stat);
      } else {
        console.log(`  - Suppression de la statistique dupliqu√©e: ${stat.key}`);
        await client.mutation("cms:deleteStatistic", { id: stat._id });
      }
    }
    console.log(`  ‚úÖ ${stats.length - uniqueStats.length} statistiques dupliqu√©es supprim√©es`);

    // Nettoyer les services dupliqu√©s
    console.log("\nüõ†Ô∏è Nettoyage des services...");
    const services = await client.query("cms:getServices");
    const uniqueServices = [];
    const seenTitles = new Set();
    
    for (const service of services) {
      if (!seenTitles.has(service.title)) {
        seenTitles.add(service.title);
        uniqueServices.push(service);
      } else {
        console.log(`  - Suppression du service dupliqu√©: ${service.title}`);
        await client.mutation("cms:deleteService", { id: service._id });
      }
    }
    console.log(`  ‚úÖ ${services.length - uniqueServices.length} services dupliqu√©s supprim√©s`);

    // Nettoyer les zones dupliqu√©es
    console.log("\nüìç Nettoyage des zones...");
    const zones = await client.query("cms:getZones");
    const uniqueZones = [];
    const seenNames = new Set();
    
    for (const zone of zones) {
      if (!seenNames.has(zone.name)) {
        seenNames.add(zone.name);
        uniqueZones.push(zone);
      } else {
        console.log(`  - Suppression de la zone dupliqu√©e: ${zone.name}`);
        await client.mutation("cms:deleteZone", { id: zone._id });
      }
    }
    console.log(`  ‚úÖ ${zones.length - uniqueZones.length} zones dupliqu√©es supprim√©es`);

    // Nettoyer les raisons dupliqu√©es
    console.log("\nüí° Nettoyage des raisons...");
    const reasons = await client.query("cms:getReasons");
    const uniqueReasons = [];
    const seenReasonTitles = new Set();
    
    for (const reason of reasons) {
      if (!seenReasonTitles.has(reason.title)) {
        seenReasonTitles.add(reason.title);
        uniqueReasons.push(reason);
      } else {
        console.log(`  - Suppression de la raison dupliqu√©e: ${reason.title}`);
        await client.mutation("cms:deleteReason", { id: reason._id });
      }
    }
    console.log(`  ‚úÖ ${reasons.length - uniqueReasons.length} raisons dupliqu√©es supprim√©es`);

    // Nettoyer les t√©moignages dupliqu√©s
    console.log("\nüí¨ Nettoyage des t√©moignages...");
    const testimonials = await client.query("cms:getTestimonials");
    const uniqueTestimonials = [];
    const seenTexts = new Set();
    
    for (const testimonial of testimonials) {
      if (!seenTexts.has(testimonial.text)) {
        seenTexts.add(testimonial.text);
        uniqueTestimonials.push(testimonial);
      } else {
        console.log(`  - Suppression du t√©moignage dupliqu√©: ${testimonial.text.substring(0, 50)}...`);
        await client.mutation("cms:deleteTestimonial", { id: testimonial._id });
      }
    }
    console.log(`  ‚úÖ ${testimonials.length - uniqueTestimonials.length} t√©moignages dupliqu√©s supprim√©s`);

    console.log("\n‚úÖ Nettoyage termin√© avec succ√®s!");

  } catch (error) {
    console.error("‚ùå Erreur lors du nettoyage:", error);
  }
}

cleanDuplicateData();
