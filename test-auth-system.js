import { ConvexHttpClient } from "convex/browser";
import { readFileSync } from 'fs';

// Lire le fichier .env
const envContent = readFileSync('.env', 'utf8');
const envVars = {};
envContent.split('\n').forEach(line => {
  const [key, value] = line.split('=');
  if (key && value) {
    envVars[key.trim()] = value.trim();
  }
});

const CONVEX_URL = envVars.VITE_CONVEX_URL;

if (!CONVEX_URL || CONVEX_URL.includes("your-convex-deployment")) {
  console.error("‚ùå VITE_CONVEX_URL non configur√© dans .env");
  process.exit(1);
}

const convexClient = new ConvexHttpClient(CONVEX_URL);

async function testAuthSystem() {
  console.log("üß™ Test du syst√®me d'authentification...");
  console.log(`üì° Connexion √†: ${CONVEX_URL}`);

  try {
    // Test 1: V√©rifier la connexion
    console.log("\n1Ô∏è‚É£ Test de connexion Convex...");
    const allUsers = await convexClient.query("auth:getAllUsers");
    console.log("‚úÖ Connexion Convex r√©ussie");
    console.log(`üìä ${allUsers.length} utilisateurs trouv√©s`);

    // Test 2: Tester la connexion avec un utilisateur admin
    console.log("\n2Ô∏è‚É£ Test de connexion admin...");
    try {
      const loginResult = await convexClient.action("authActions:authenticateUser", {
        email: "admin@dr-ravalement.fr",
        password: "admin123",
        ip_address: "127.0.0.1",
        user_agent: "Test Script"
      });
      
      console.log("‚úÖ Connexion admin r√©ussie");
      console.log(`üë§ Utilisateur: ${loginResult.user.email} (${loginResult.user.role})`);
      console.log(`üîë Token: ${loginResult.session.token.substring(0, 20)}...`);
      
      // Test 3: V√©rifier la session
      console.log("\n3Ô∏è‚É£ Test de validation de session...");
      const sessionResult = await convexClient.query("auth:validateSession", {
        token: loginResult.session.token
      });
      
      if (sessionResult) {
        console.log("‚úÖ Session valide");
        console.log(`üë§ Utilisateur connect√©: ${sessionResult.user.email}`);
        console.log(`‚è∞ Expire le: ${sessionResult.session.expires_at}`);
      } else {
        console.log("‚ùå Session invalide");
      }
      
      // Test 4: Test de d√©connexion
      console.log("\n4Ô∏è‚É£ Test de d√©connexion...");
      const logoutResult = await convexClient.mutation("auth:logout", {
        token: loginResult.session.token
      });
      
      if (logoutResult.success) {
        console.log("‚úÖ D√©connexion r√©ussie");
      } else {
        console.log("‚ùå Erreur de d√©connexion");
      }
      
      // Test 5: V√©rifier que la session est supprim√©e
      console.log("\n5Ô∏è‚É£ Test de session supprim√©e...");
      const sessionAfterLogout = await convexClient.query("auth:validateSession", {
        token: loginResult.session.token
      });
      
      if (!sessionAfterLogout) {
        console.log("‚úÖ Session correctement supprim√©e");
      } else {
        console.log("‚ùå Session encore active apr√®s d√©connexion");
      }
      
    } catch (error) {
      console.error("‚ùå Erreur lors du test de connexion:", error.message);
    }

    // Test 6: Tester avec un utilisateur √©diteur
    console.log("\n6Ô∏è‚É£ Test de connexion √©diteur...");
    try {
      const editorLogin = await convexClient.action("authActions:authenticateUser", {
        email: "editor@dr-ravalement.fr",
        password: "editor123",
        ip_address: "127.0.0.1",
        user_agent: "Test Script"
      });
      
      console.log("‚úÖ Connexion √©diteur r√©ussie");
      console.log(`üë§ Utilisateur: ${editorLogin.user.email} (${editorLogin.user.role})`);
      
      // D√©connexion
      await convexClient.mutation("auth:logout", {
        token: editorLogin.session.token
      });
      console.log("‚úÖ D√©connexion √©diteur r√©ussie");
      
    } catch (error) {
      console.error("‚ùå Erreur lors du test √©diteur:", error.message);
    }

    // Test 7: Tester avec un utilisateur visualiseur
    console.log("\n7Ô∏è‚É£ Test de connexion visualiseur...");
    try {
      const viewerLogin = await convexClient.action("authActions:authenticateUser", {
        email: "viewer@dr-ravalement.fr",
        password: "viewer123",
        ip_address: "127.0.0.1",
        user_agent: "Test Script"
      });
      
      console.log("‚úÖ Connexion visualiseur r√©ussie");
      console.log(`üë§ Utilisateur: ${viewerLogin.user.email} (${viewerLogin.user.role})`);
      
      // D√©connexion
      await convexClient.mutation("auth:logout", {
        token: viewerLogin.session.token
      });
      console.log("‚úÖ D√©connexion visualiseur r√©ussie");
      
    } catch (error) {
      console.error("‚ùå Erreur lors du test visualiseur:", error.message);
    }

    // Test 8: Test avec des identifiants incorrects
    console.log("\n8Ô∏è‚É£ Test avec identifiants incorrects...");
    try {
      await convexClient.action("authActions:authenticateUser", {
        email: "admin@dr-ravalement.fr",
        password: "mauvais_mot_de_passe",
        ip_address: "127.0.0.1",
        user_agent: "Test Script"
      });
      console.log("‚ùå Connexion r√©ussie avec mauvais mot de passe (probl√®me de s√©curit√©)");
    } catch (error) {
      console.log("‚úÖ Connexion correctement refus√©e avec mauvais mot de passe");
      console.log(`   Message: ${error.message}`);
    }

    console.log("\nüéâ Tests d'authentification termin√©s !");
    console.log("\nüìã R√©sum√© des tests:");
    console.log("  ‚úÖ Connexion Convex");
    console.log("  ‚úÖ Authentification admin");
    console.log("  ‚úÖ Validation de session");
    console.log("  ‚úÖ D√©connexion");
    console.log("  ‚úÖ Suppression de session");
    console.log("  ‚úÖ Authentification √©diteur");
    console.log("  ‚úÖ Authentification visualiseur");
    console.log("  ‚úÖ Rejet des identifiants incorrects");

    console.log("\nüîê Comptes de test disponibles:");
    console.log("  üìß admin@dr-ravalement.fr / admin123 (Admin)");
    console.log("  üìß editor@dr-ravalement.fr / editor123 (√âditeur)");
    console.log("  üìß viewer@dr-ravalement.fr / viewer123 (Visualiseur)");

  } catch (error) {
    console.error("‚ùå Erreur lors des tests:", error);
    process.exit(1);
  }
}

// Ex√©cuter les tests
testAuthSystem();
