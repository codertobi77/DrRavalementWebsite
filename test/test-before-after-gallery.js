import { ConvexHttpClient } from "convex/browser";

// Configuration Convex
const CONVEX_URL = process.env.VITE_CONVEX_URL || "https://acoustic-ox-512.convex.cloud";

const client = new ConvexHttpClient(CONVEX_URL);

async function testBeforeAfterGallery() {
  console.log("üß™ Test de la galerie avant-apr√®s...");
  
  try {
    // 1. Tester la r√©cup√©ration des projets avant-apr√®s
    console.log("\n1. R√©cup√©ration des projets avant-apr√®s...");
    const beforeAfterProjects = await client.query("cms:getBeforeAfterProjects");
    console.log(`‚úÖ ${beforeAfterProjects.length} projets avant-apr√®s trouv√©s`);
    
    if (beforeAfterProjects.length > 0) {
      console.log("üìã D√©tails des projets:");
      beforeAfterProjects.forEach((project, index) => {
        console.log(`   ${index + 1}. ${project.title}`);
        console.log(`      - Cat√©gorie: ${project.category}`);
        console.log(`      - Image avant: ${project.before_image ? '‚úÖ' : '‚ùå'}`);
        console.log(`      - Image apr√®s: ${project.after_image ? '‚úÖ' : '‚ùå'}`);
        console.log(`      - Actif: ${project.is_active ? '‚úÖ' : '‚ùå'}`);
        console.log(`      - Avant-apr√®s: ${project.is_before_after ? '‚úÖ' : '‚ùå'}`);
        console.log("");
      });
    }

    // 2. Tester la r√©cup√©ration de tous les projets de portfolio
    console.log("\n2. R√©cup√©ration de tous les projets de portfolio...");
    const allProjects = await client.query("cms:getPortfolioProjects");
    console.log(`‚úÖ ${allProjects.length} projets de portfolio trouv√©s`);
    
    // Compter les projets avant-apr√®s
    const beforeAfterCount = allProjects.filter(p => p.is_before_after).length;
    console.log(`üìä Projets avant-apr√®s: ${beforeAfterCount}/${allProjects.length}`);

    // 3. Tester la r√©cup√©ration par cat√©gorie
    console.log("\n3. Test des cat√©gories...");
    const categories = ['ravalement', 'maconnerie', 'couverture'];
    
    for (const category of categories) {
      const categoryProjects = await client.query("cms:getPortfolioProjectsByCategory", { category });
      const beforeAfterInCategory = categoryProjects.filter(p => p.is_before_after).length;
      console.log(`   ${category}: ${categoryProjects.length} projets (${beforeAfterInCategory} avant-apr√®s)`);
    }

    // 4. V√©rifier la structure des donn√©es
    console.log("\n4. V√©rification de la structure des donn√©es...");
    if (beforeAfterProjects.length > 0) {
      const sampleProject = beforeAfterProjects[0];
      const requiredFields = ['title', 'category', 'description', 'details', 'before_image', 'after_image', 'is_before_after'];
      
      console.log("üîç Champs requis dans les projets avant-apr√®s:");
      requiredFields.forEach(field => {
        const hasField = sampleProject.hasOwnProperty(field);
        const value = sampleProject[field];
        console.log(`   ${field}: ${hasField ? '‚úÖ' : '‚ùå'} ${value ? `(${typeof value})` : '(vide)'}`);
      });
    }

    console.log("\nüéâ Test de la galerie avant-apr√®s termin√© avec succ√®s !");
    
  } catch (error) {
    console.error("‚ùå Erreur lors du test:", error);
  }
}

// Ex√©cuter le test
testBeforeAfterGallery()
  .then(() => {
    console.log("‚úÖ Test termin√©");
    process.exit(0);
  })
  .catch((error) => {
    console.error("‚ùå Erreur fatale:", error);
    process.exit(1);
  });

export { testBeforeAfterGallery };
