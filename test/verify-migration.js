#!/usr/bin/env node

/**
 * Script de v√©rification finale de la migration
 * Ex√©cuter avec: node verify-migration.js
 */

import { ConvexHttpClient } from "convex/browser";
import { api } from "./convex/_generated/api.js";
import fs from 'fs';

// Lire l'URL Convex depuis le fichier .env
let convexUrl = "https://your-convex-url.convex.cloud";

try {
  const envContent = fs.readFileSync('.env', 'utf8');
  const match = envContent.match(/VITE_CONVEX_URL=(.+)/);
  if (match) {
    convexUrl = match[1].trim();
  }
} catch (error) {
  console.error("‚ùå Erreur lors de la lecture du fichier .env:", error.message);
  process.exit(1);
}

const client = new ConvexHttpClient(convexUrl);

async function verifyMigration() {
  console.log("üîç V√©rification finale de la migration Convex\n");
  
  let allTestsPassed = true;

  try {
    // Test 1: Connexion Convex
    console.log("1Ô∏è‚É£ Test de connexion Convex...");
    const config = await client.query(api.siteConfig.getConfigByKey, { key: "booking_config" });
    if (config) {
      console.log("‚úÖ Connexion Convex r√©ussie");
    } else {
      console.log("‚ùå Connexion Convex √©chou√©e");
      allTestsPassed = false;
    }
  } catch (error) {
    console.log("‚ùå Erreur de connexion Convex:", error.message);
    allTestsPassed = false;
  }

  try {
    // Test 2: Configuration du site
    console.log("\n2Ô∏è‚É£ Test de la configuration du site...");
    const bookingConfig = await client.query(api.siteConfig.getConfigByKey, { key: "booking_config" });
    const contactConfig = await client.query(api.siteConfig.getConfigByKey, { key: "contact_config" });
    
    if (bookingConfig && contactConfig) {
      console.log("‚úÖ Configuration du site charg√©e");
      console.log(`   - Services: ${bookingConfig.services?.length || 0}`);
      console.log(`   - Cr√©neaux: ${bookingConfig.timeSlots?.length || 0}`);
      console.log(`   - Email: ${contactConfig.email || 'N/A'}`);
    } else {
      console.log("‚ùå Configuration du site manquante");
      allTestsPassed = false;
    }
  } catch (error) {
    console.log("‚ùå Erreur lors du chargement de la configuration:", error.message);
    allTestsPassed = false;
  }

  try {
    // Test 3: Pages
    console.log("\n3Ô∏è‚É£ Test des pages...");
    const pages = await client.query(api.pages.getAllPages);
    if (pages && pages.length > 0) {
      console.log(`‚úÖ ${pages.length} pages trouv√©es`);
      const publishedPages = pages.filter(p => p.status === 'published');
      console.log(`   - Publi√©es: ${publishedPages.length}`);
    } else {
      console.log("‚ùå Aucune page trouv√©e");
      allTestsPassed = false;
    }
  } catch (error) {
    console.log("‚ùå Erreur lors du chargement des pages:", error.message);
    allTestsPassed = false;
  }

  try {
    // Test 4: R√©servations
    console.log("\n4Ô∏è‚É£ Test des r√©servations...");
    const bookings = await client.query(api.bookings.getBookings);
    const stats = await client.query(api.bookings.getBookingStats);
    
    if (bookings !== undefined && stats !== undefined) {
      console.log(`‚úÖ Syst√®me de r√©servations fonctionnel`);
      console.log(`   - Total: ${stats.total}`);
      console.log(`   - En attente: ${stats.pending}`);
      console.log(`   - Confirm√©es: ${stats.confirmed}`);
    } else {
      console.log("‚ùå Syst√®me de r√©servations d√©faillant");
      allTestsPassed = false;
    }
  } catch (error) {
    console.log("‚ùå Erreur lors du chargement des r√©servations:", error.message);
    allTestsPassed = false;
  }

  try {
    // Test 5: Cr√©ation d'une r√©servation de test
    console.log("\n5Ô∏è‚É£ Test de cr√©ation d'une r√©servation...");
    const testBooking = await client.mutation(api.bookings.createBooking, {
      client_name: "Test Migration",
      client_email: "test@migration.com",
      client_phone: "0123456789",
      service_type: "Test Service",
      booking_date: "2024-12-31",
      booking_time: "10:00",
      duration: 60,
      address: "123 Test Street",
      notes: "Test de migration Convex",
      status: "pending"
    });
    
    if (testBooking) {
      console.log("‚úÖ Cr√©ation de r√©servation r√©ussie");
      
      // Nettoyer la r√©servation de test
      await client.mutation(api.bookings.deleteBooking, { id: testBooking });
      console.log("‚úÖ Suppression de r√©servation r√©ussie");
    } else {
      console.log("‚ùå Cr√©ation de r√©servation √©chou√©e");
      allTestsPassed = false;
    }
  } catch (error) {
    console.log("‚ùå Erreur lors de la cr√©ation de r√©servation:", error.message);
    allTestsPassed = false;
  }

  // R√©sultat final
  console.log("\n" + "=".repeat(50));
  if (allTestsPassed) {
    console.log("üéâ MIGRATION CONVEX R√âUSSIE !");
    console.log("\n‚úÖ Tous les tests sont pass√©s");
    console.log("‚úÖ L'application est pr√™te √† √™tre utilis√©e");
    console.log("‚úÖ Vous pouvez maintenant supprimer les d√©pendances Supabase");
    
    console.log("\nüìã Prochaines √©tapes:");
    console.log("   1. D√©marrez l'application: npm run dev");
    console.log("   2. Testez les fonctionnalit√©s dans le navigateur");
    console.log("   3. Supprimez les d√©pendances Supabase si tout fonctionne");
    console.log("   4. D√©ployez en production avec: npx convex deploy");
  } else {
    console.log("‚ùå MIGRATION INCOMPL√àTE");
    console.log("\n‚ö†Ô∏è  Certains tests ont √©chou√©");
    console.log("‚ö†Ô∏è  V√©rifiez la configuration avant de continuer");
  }
  console.log("=".repeat(50));

  return allTestsPassed;
}

// Gestion des erreurs
process.on('unhandledRejection', (error) => {
  console.error('‚ùå Erreur non g√©r√©e:', error);
  process.exit(1);
});

process.on('uncaughtException', (error) => {
  console.error('‚ùå Exception non captur√©e:', error);
  process.exit(1);
});

// Ex√©cuter la v√©rification
verifyMigration().catch(console.error);
